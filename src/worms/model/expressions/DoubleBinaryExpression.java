package worms.model.expressions;import be.kuleuven.cs.som.annotate.*;/** * A class of binary arithmetic expressions. *   A binary expression involves a single operator applied *   to a left-hand operand and a right-hand operand. *  * @version  2.0 * @author   Eric Steegmans */public abstract class DoubleBinaryExpression extends DoubleComposedExpression {	/**	 * Initialize this new binary expression with given operands.	 *	 * @param  left	 *         The left operand for this new binary expression.	 * @param  right	 *         The right operand for this new binary expression.	 * @post   The left operand of this new binary expression is the	 *         same as the given left operand.	 *       | new.getLeftOperand() == left	 * @post   The right operand of this new binary expression is the	 *         same as the given right operand.	 *       | new.getRightOperand() == right	 * @throws IllegalOperandException	 *         This new binary expression cannot have the given left	 *         operand or the given right operand as its operand.	 *      |     (! canHaveAsOperand(left))	 *      |  || (! canHaveAsOperand(right))	 */	@Model	protected DoubleBinaryExpression(DoubleExpression left, DoubleExpression right)			throws IllegalOperandException {		leftOperand=left;		rightOperand=right;	}	/**	 * Return the number of operands involved in this binary expression.	 *	 * @return A binary expression always involves two operands.	 *       | result == 2	 */	@Override	@Basic	public final int getNbOperands() {		return 2;	}	/**	 * Check whether this binary expression can have the given	 * number as its number of operands.	 *	 * @return True if and only if the given number is 2.	 *       | result == (number == 2)	 */	@Override	@Raw	public final boolean canHaveAsNbOperands(int number) {		return number == 2;	}	/**	 * Return the operand of this binary expression at the given index.	 * 	 * @return If the given index is 1, the left operand of this	 *         binary expression; otherwise the right operand of	 *         this binary expression.	 *       | if (index == 1)	 *       |   then result == getLeftOperand()	 *       |   else result == getRightOperand()	 */		@Raw	public Expression getOperandAt(int index)			throws IndexOutOfBoundsException {		if ((index != 1) && (index != 2))			throw new IndexOutOfBoundsException();		if (index == 1)			return (Expression) getLeftOperand();		else			return (Expression) getRightOperand();	}	/**	 * Return the left operand of this binary expression.	 */	@Basic	public DoubleExpression getLeftOperand() {		return leftOperand;	}	/**	 * Variable referencing the left operand of this	 * binary expression.	 *	 * @note   This variable is not qualified final, such that operands	 *         can be changed in cloning unary expressions.	 */	private DoubleExpression leftOperand;	/**	 * Return the right operand of this binary expression.	 */	@Basic	public DoubleExpression getRightOperand() {		return rightOperand;	}	/**	 * Variable referencing the right operand of this	 * binary expression.	 *	 * @note   This variable is not qualified final, such that operands	 *         can be changed in cloning unary expressions.	 */	private DoubleExpression rightOperand;}